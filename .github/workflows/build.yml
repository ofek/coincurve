name: build

on:
  push:
    tags:
    - v*
    branches:
    - master
  pull_request:
    branches:
    - master

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

env:
  COINCURVE_UPSTREAM_REF: 1ad5185cd42c0636104129fcc9f6a4bf9c67cc40
  COINCURVE_IGNORE_SYSTEM_LIB: 'ON'
  COINCURVE_SECP256K1_STATIC: 'ON'
  COINCURVE_CROSS_HOST: ''
  CIBW_ENVIRONMENT_PASS_LINUX: >
    COINCURVE_UPSTREAM_REF
    COINCURVE_IGNORE_SYSTEM_LIB
    COINCURVE_SECP256K1_STATIC
    COINCURVE_CROSS_HOST
  CIBW_PROJECT_REQUIRES_PYTHON: '>=3.8'
  CIBW_BEFORE_ALL_MACOS: ./.github/scripts/install-macos-build-deps.sh
  CIBW_TEST_REQUIRES: pytest pytest-benchmark
  CIBW_TEST_COMMAND: >
    python -c
    "from coincurve import PrivateKey;
    a=PrivateKey();
    b=PrivateKey();
    assert a.ecdh(b.public_key.format())==b.ecdh(a.public_key.format())
    " &&
    python -m pytest {project}
  CIBW_TEST_SKIP: "*-macosx_arm64"
  CIBW_SKIP: >
      pp*

jobs:
  test:
    name: Test latest Python
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: '3.12'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade Python packaging tools
      run: pip install --upgrade pip setuptools wheel

    - name: Show runner information
      run: |
        python --version
        pip --version

    - name: Install dependencies
      run: ./.github/scripts/install-test-deps.sh

    - name: Check style and typing
      run: tox -e lint,typing

    - name: Run tests
      run: tox -e ${PYTHON_VERSION}

    - name: Run benchmarks
      run: tox -e bench

    - name: Upload coverage
      run: codecov -X gcov

  linux-wheels-standard:
    name: Build Linux wheels
    needs:
    - test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-linux-wheels-standard
        path: wheelhouse/*.whl
        if-no-files-found: error

  macos-wheels-x86_64:
    name: Build macOS wheels
    needs:
    - test
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17
      env:
        CIBW_ARCHS_MACOS: x86_64

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-macos-wheels-x86_64
        path: wheelhouse/*.whl
        if-no-files-found: error

  macos-wheels-arm:
    name: Build macOS wheels for ARM (Native)
    needs:
    - test
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-macos-wheels-arm
        path: wheelhouse/*.whl
        if-no-files-found: error

  windows-wheels-x86_64:
    name: Build Windows wheels AMD64
    needs:
    - test
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17
      env:
        CIBW_ARCHS_WINDOWS: 'AMD64'
        CIBW_BEFORE_ALL: choco install -y --no-progress --no-color cmake>=3.28 pkgconfiglite

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-windows-wheels-x86_64
        path: wheelhouse/*.whl
        if-no-files-found: error

  windows-wheels-x86:
    name: Build Windows wheels x86
    needs:
    - test
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17
      env:
        COINCURVE_CROSS_HOST: 'x86'
        CIBW_ARCHS_WINDOWS: 'x86'
        CIBW_BEFORE_ALL: choco install -y --no-progress --no-color cmake>=3.28 pkgconfiglite

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-windows-wheels-x86
        path: wheelhouse/*.whl
        if-no-files-found: error

  windows-wheels-arm:
    name: Build Windows wheels for ARM64
    needs:
    - test
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17
      env:
        COINCURVE_CROSS_HOST: 'arm64'
        CIBW_ARCHS_WINDOWS: 'ARM64'
        CIBW_BEFORE_ALL: choco install -y --no-progress --no-color cmake>=3.28 pkgconfiglite

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-windows-wheels-arm
        path: wheelhouse/*.whl
        if-no-files-found: error

  sdist:
    name: Build source distribution
    needs:
    - test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install build dependencies
      run: python -m pip install build

    - name: Build source distribution
      run: python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-sdist
        path: dist/*
        if-no-files-found: error

  linux-wheels-arm:
    name: Build Linux wheels for ARM
    needs:
    - test
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push'
      &&
      (github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags'))

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.17
      env:
        CIBW_ARCHS_LINUX: aarch64

    - uses: actions/upload-artifact@v4
      with:
        name: artifact-linux-wheels-arm
        path: wheelhouse/*.whl
        if-no-files-found: error

  publish:
    name: Publish release
    needs:
    - linux-wheels-standard
    - macos-wheels-x86_64
    - macos-wheels-arm
    - windows-wheels-x86_64
    - windows-wheels-x86
    - windows-wheels-arm
    - sdist
    - linux-wheels-arm
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: artifacts
        pattern: artifact-*
        merge-multiple: true
        path: dist
    - run: ls -l dist

    - name: Push build artifacts to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
